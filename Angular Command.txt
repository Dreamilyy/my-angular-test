Angular เป็น framework สำหรับพัฒนาเว็บแอปพลิเคชันในส่วนของ client-side ที่ใช้ TypeScript 
ในการเขียนโค้ด ส่วนประกอบหลักของ Angular ประกอบด้วย:

Components: คือส่วนประกอบหลักที่ใช้สำหรับสร้าง user interface ใน Angular โดยแต่ละ component 
จะประกอบด้วย HTML template, TypeScript class และ CSS style ซึ่งทำหน้าที่รวมการแสดงผลของข้อมูลและ
การจัดการกับเหตุการณ์ต่าง ๆ ของผู้ใช้งาน

Directives: คือส่วนประกอบที่ช่วยในการเปลี่ยนแปลงพฤติกรรมของ HTML element โดยใช้ตัวกำหนดค่า (attribute) 
ที่ติดตัวกับ HTML element เช่น *ngIf, *ngFor, ngStyle ฯลฯ

Services: คือส่วนประกอบที่ใช้สำหรับการจัดการธุรกรรมของเว็บแอปพลิเคชัน เช่น การเรียก API, การจัดการการเก็บข้อมูลใน local 
storage ฯลฯ โดย services จะเป็นส่วนหนึ่งของ dependency injection ใน Angular

Modules: คือส่วนประกอบที่ใช้สำหรับจัดการโมดูลต่าง ๆ ใน Angular โดยแต่ละโมดูลจะประกอบด้วย components, 
directives, services และโมดูลย่อยอื่น ๆ ที่เกี่ยวข้อง

Pipes: คือส่วนประกอบที่ช่วยในการจัดการและแปลงข้อมูลที่แสดงผลใน user interface โดย pipes จ
ะรับข้อมูลเข้ามาและแปลงเป็นรูปแบบที่ต้องการก่อนที่จะแสดงผล

Routing: คือส่วนประกอบที่ใช้สำหรับการเปลี่ยนเส้นทางของเว็บแอปพลิเคชันโดยใช้ URL โดยจะเชื่อมโยง





Regenerate response

1 ตรวจสอบให้แน่ใจว่าคุณไม่ได้อยู่ในไดเรกทอรีเวิร์กสเปซเชิงมุม ตัวอย่างเช่น หากคุณอยู่ในพื้นที่ทำงานการเริ่มต้นใช้งานจากแบบฝึกหัดก่อนหน้า 
ให้นำทางไปยังพาเรนต์

2 เรียกใช้ng newตามด้วยชื่อแอปพลิเคชันที่แสดงที่นี่:

ng new angular-tour-of-heroes

3 ng newแจ้งให้คุณทราบข้อมูลเกี่ยวกับคุณสมบัติที่จะรวมไว้ในโครงการเริ่มต้น ยอมรับค่าเริ่มต้นโดยกดปุ่ม Enter หรือ Return



***
ng newติดตั้งแพ็คเกจที่จำเป็นnpmและการพึ่งพาอื่น ๆ ที่ Angular ต้องการ การดำเนินการนี้อาจใช้เวลาสักครู่

ng newสร้างเวิร์กสเปซและไฟล์โปรเจ็กต์เริ่มต้นต่อไปนี้ด้วย:

พื้นที่ทำงานใหม่ที่มีชื่อไดเร็กทอรีรูทangular-tour-of-heroes
โครงการแอปพลิเคชันโครงกระดูกเริ่มต้นในsrc/appไดเร็กทอรีย่อย
ไฟล์การกำหนดค่าที่เกี่ยวข้อง
โครงการแอปพลิเคชันเริ่มต้นประกอบด้วยแอปพลิเคชันอย่างง่ายที่พร้อมเรียกใช้
***


Application service

cd angular-tour-of-heroes
ng serve --open

คำ ng serve สั่ง:
สร้างแอปพลิเคชัน
เริ่มเซิร์ฟเวอร์การพัฒนา
ดูไฟล์ต้นฉบับ
สร้างแอปพลิเคชันใหม่เมื่อคุณทำการเปลี่ยนแปลง
ธง--openเปิดเบราว์เซอร์ไปhttp://localhost:4200ที่

Angular components

app.component.ts	รหัสคลาสคอมโพเนนต์ เขียนด้วย TypeScript
app.component.html	เทมเพลตส่วนประกอบ เขียนด้วย HTML
app.component.css	สไตล์ CSS ส่วนตัวของคอมโพเนนต์

**
เมื่อคุณเรียกใช้ng newAngular จะสร้างข้อกำหนดการทดสอบสำหรับแอปพลิเคชันใหม่ของคุณ ขออภัย การเปลี่ยนแปลงเหล่านี้ขัดกับข้อกำหนดเฉพาะที่สร้างขึ้นใหม่ของคุณ

นั่นจะไม่เป็นปัญหาเพราะการทดสอบเชิงมุมอยู่นอกขอบเขตของบทช่วยสอนนี้และจะไม่ถูกนำมาใช้

หากต้องการเรียนรู้เพิ่มเติมเกี่ยวกับการทดสอบด้วย Angular โปรดดูการทดสอบ
**

{{ }} วงเล็บปีกกาคู่เป็นไวยากรณ์การรวมการแก้ไข ของ Angular การเชื่อมโยงการแก้ไขนี้แสดงค่าคุณสมบัติของคอมโพเนนต์titleภายในแท็กส่วนหัวของ HTML
เบราว์เซอร์จะรีเฟรชและแสดงชื่อแอปพลิเคชันใหม่

สรุป
•คุณสร้างโครงสร้างแอปพลิเคชันเริ่มต้นโดยใช้ng new.
•คุณได้เรียนรู้ว่าส่วนประกอบเชิงมุมแสดงข้อมูล
•คุณใช้วงเล็บปีกกาคู่ของการแก้ไขเพื่อแสดงชื่อแอปพลิเคชัน


ใช้ng generateเพื่อสร้างส่วนประกอบใหม่ชื่อheroes.

ng generate component heroes

ng generateสร้างไดเร็กทอรีใหม่ , src/app/heroes/, และสร้างไฟล์สามไฟล์พร้อม HeroesComponentกับไฟล์ทดสอบ

selector	ตัวเอาไปเรียกในช่องอื่นๆ <>
templateUrl	ตำแหน่งของไฟล์เทมเพลตของคอมโพเนนต์
styleUrls	ตำแหน่งของสไตล์ CSS ส่วนตัวของคอมโพเนนต์

บทช่วยสอนนี้แสดงวิธี:

• ขยายแอปพลิเคชัน Tour of Heroes เพื่อแสดงรายชื่อฮีโร่
• อนุญาตให้ผู้ใช้เลือกฮีโร่และแสดงรายละเอียดของฮีโร่

สร้างฮีโร่จำลอง
ขั้นตอนแรกคือการสร้างฮีโร่บางตัวเพื่อแสดง

สร้างไฟล์ชื่อmock-heroes.tsในsrc/app/ไดเร็กทอรี กำหนดHEROESค่าคงที่เป็นอาร์เรย์ของฮีโร่สิบตัวแล้วส่งออก ไฟล์ควรมีลักษณะดังนี้

src/app/mock-heroes.ts

import { Hero } from './hero';

export const HEROES: Hero[] = [
  { id: 12, name: 'Dr. Nice' },
  { id: 13, name: 'Bombasto' },
  { id: 14, name: 'Celeritas' },
  { id: 15, name: 'Magneta' },
  { id: 16, name: 'RubberMan' },
  { id: 17, name: 'Dynama' },
  { id: 18, name: 'Dr. IQ' },
  { id: 19, name: 'Magma' },
  { id: 20, name: 'Tornado' }
];

รายการฮีโร่ด้วย*ngFor
เปิดHeroesComponentไฟล์เทมเพลตและทำการเปลี่ยนแปลงต่อไปนี้:

1 เพิ่ม<h2>ที่ด้านบน
2 ด้านล่าง<h2>ให้เพิ่ม<ul>องค์ประกอบ
3 ใน<ul>องค์ประกอบ ให้แทรกไฟล์<li>.
4 วาง<button>ภายใน<li>ที่แสดงคุณสมบัติขององค์ประกอบheroภายใน<span>
5 เพิ่มคลาส CSS เพื่อจัดรูปแบบส่วนประกอบ

<li *ngFor="let hero of heroes">
เป็นคำสั่งทวน*ngForของ Angular มันทำซ้ำองค์ประกอบโฮสต์สำหรับแต่ละองค์ประกอบในรายการ
ไวยากรณ์ในตัวอย่างนี้เป็นดังนี้:
<li>	องค์ประกอบโฮสต์
heroes	เก็บรายชื่อฮีโร่จำลองจากHeroesComponent class รายชื่อฮีโร่จำลอง
hero	เก็บวัตถุฮีโร่ปัจจุบันสำหรับการวนซ้ำแต่ละครั้งในรายการ

**อย่าลืมใส่เครื่องหมายดอกจัน*หน้าngFor. เป็นส่วนสำคัญของไวยากรณ์**

สรุป
• แอปพลิเคชั่น Tour of Heroes แสดงรายชื่อฮีโร่พร้อมมุมมองรายละเอียด
• ผู้ใช้สามารถเลือกฮีโร่และดูรายละเอียดของฮีโร่นั้นได้
• คุณเคยแสดงรายการ*ngFor
• คุณเคยรวมหรือไม่รวมบล็อก HTML อย่างมีเงื่อนไข*ngIf
• คุณสามารถสลับคลาสสไตล์ CSS ด้วยclassการผูก

สร้างองค์ประกอบคุณลักษณะ
• ที่HeroesComponentแสดงรายชื่อฮีโร่
• ที่HeroDetailComponentแสดงรายละเอียดของฮีโร่ที่เลือก

สรุป
• คุณสร้างไฟล์HeroDetailComponent.

• คุณใช้การผูกคุณสมบัติเพื่อให้พาเรนต์ควบคุมHeroesComponentลูกHeroDetailComponent

• คุณใช้@Inputมัณฑนากร เพื่อทำให้ คุณสมบัติ พร้อมheroสำหรับการเชื่อมโยงภายนอกHeroesComponent

Hero Service
Serviceเป็นวิธีที่ยอด เยี่ยมในการแบ่งปันข้อมูลระหว่างชั้นเรียนที่ไม่รู้จักกัน สร้างMessageServiceถัดไปและฉีดในสองที่นี้

• Inject in HeroServiceซึ่งใช้บริการส่งข้อความ
• Inject in MessagesComponentซึ่งแสดงข้อความนั้น และแสดง ID เมื่อผู้ใช้คลิกที่ฮีโร่

สรุป
• คุณปรับโครงสร้างการเข้าถึงข้อมูลไปยังHeroServiceชั้นเรียน
• คุณลงทะเบียนHeroServiceเป็นผู้ให้บริการที่ระดับรูท เพื่อให้สามารถแทรกที่ใดก็ได้ในแอปพลิเคชัน
• คุณใช้Angular Dependency Injectionเพื่อฉีดเข้าไปในส่วนประกอบ
• คุณให้HeroService get dataลายเซ็นแบบอะซิงโครนัสแก่เมธอด
• คุณค้นพบ และ ไลบรารีObservableRxJSObservable
• คุณใช้ RxJS of()เพื่อส่งคืนObservable<Hero[]>ซึ่งเป็นฮีโร่จำลองที่สังเกตได้
• ngOnInithook วงจรชีวิตของคอมโพเนนต์ เรียก HeroServiceเมธอด ไม่ใช่คอนสตรัคเตอร์
• คุณสร้าง a MessageServiceสำหรับการสื่อสารแบบหลวมๆ ระหว่างชั้นเรียน
• การHeroServiceฉีดเข้าไปในส่วนประกอบถูกสร้างขึ้นด้วยบริการการฉีดMessageServiceอื่น

Add navigation with routing
แอปพลิเคชัน Tour of Heroes มีข้อกำหนดใหม่:

• เพิ่มมุมมองแดชบอร์ด
• เพิ่มความสามารถในการนำทางระหว่างมุมมองฮีโร่และแดชบอร์ด
• เมื่อผู้ใช้คลิกชื่อฮีโร่ในมุมมองใดมุมมองหนึ่ง ให้นำทางไปยังมุมมองรายละเอียดของฮีโร่ที่เลือก
• เมื่อผู้ใช้คลิกลิงก์ในรายละเอียดในอีเมล ให้เปิดมุมมองรายละเอียดของฮีโร่ที่ต้องการ

ใน Angular แนวทางปฏิบัติที่ดีที่สุดคือการโหลดและกำหนดค่าเราเตอร์ในโมดูลระดับบนสุดแยกต่างหาก เราเตอร์มีไว้สำหรับการกำหนดเส้นทางและนำเข้าโดยรูAppModuleท

ตามแบบแผน ชื่อคลาสโมดูลคือAppRoutingModuleและอยู่app-routing.module.tsในsrc/appไดเร็กทอรี

เรียกใช้ng generateเพื่อสร้างโมดูลการกำหนดเส้นทางแอปพลิเคชัน

ng generate module app-routing --flat --module=app
พารามิเตอร์	รายละเอียด
--flat	วางไฟล์src/appแทนไดเร็กทอรีของตัวเอง
--module=app	บอกng generateให้ลงทะเบียนในimportsอาร์เรย์ของAppModule.

เส้นทาง
ส่วนถัดไปของไฟล์คือตำแหน่งที่คุณกำหนดเส้นทางของคุณ เส้นทางจะบอกเราเตอร์ว่าจะแสดงมุมมองใดเมื่อผู้ใช้คลิกลิงก์หรือวาง URL ลงในแถบที่อยู่ของเบราว์เซอร์

เนื่องจากapp-routing.module.tsimport แล้วHeroesComponentคุณจึงนำไปใช้ในroutesอาร์เรย์ได้:

src/app/app-routing.module.ts

const routes: Routes = [
  { path: 'heroes', component: HeroesComponent }
];
Angular ทั่วไปRouteมีสองคุณสมบัติ:

คุณสมบัติ	รายละเอียด
path	สตริงที่ตรงกับ URL ในแถบที่อยู่ของเบราว์เซอร์
component	ส่วนประกอบที่เราเตอร์ควรสร้างเมื่อนำทางไปยังเส้นทางนี้
สิ่งนี้จะบอกให้เราเตอร์จับคู่ URL นั้นpath: 'heroes'และแสดง เมื่อ URL นั้นHeroesComponentเป็นเช่นlocalhost:4200/heroes

สรุป 
• คุณได้เพิ่มเราเตอร์เชิงมุมเพื่อนำทางระหว่างส่วนประกอบต่างๆ
• คุณเปลี่ยนAppComponentเชลล์การนำทางด้วย<a>ลิงก์และ a<router-outlet>
• คุณกำหนดค่าเราเตอร์ในไฟล์AppRoutingModule
• คุณกำหนดเส้นทาง เส้นทางเปลี่ยนเส้นทาง และเส้นทางที่กำหนดพารามิเตอร์
• คุณใช้routerLinkคำสั่งในองค์ประกอบจุดยึด
• คุณได้ปรับโครงสร้างมุมมองหลัก/รายละเอียดที่เชื่อมโยงกันแน่นเป็นมุมมองรายละเอียดที่กำหนดเส้นทาง
• คุณใช้พารามิเตอร์ลิงก์เราเตอร์เพื่อนำทางไปยังมุมมองรายละเอียดของฮีโร่ที่ผู้ใช้เลือก
• คุณแบ่งปันHeroServiceกับส่วนประกอบอื่นๆ

รับข้อมูลจากเซิร์ฟเวอร์ Get data from a server
บทช่วยสอนนี้เพิ่มคุณสมบัติการคงอยู่ของข้อมูลต่อไปนี้ด้วยความช่วยเหลือจาก Angular's HttpClient.

รับHeroServiceข้อมูลฮีโร่พร้อมคำขอ HTTP
ผู้ใช้สามารถเพิ่ม แก้ไข และลบฮีโร่ และบันทึกการเปลี่ยนแปลงเหล่านี้ผ่าน HTTP
ผู้ใช้สามารถค้นหาฮีโร่ตามชื่อ

สรุป
คุณมาถึงจุดสิ้นสุดของการเดินทางแล้ว และคุณทำสำเร็จหลายอย่างแล้ว

• คุณได้เพิ่มการอ้างอิงที่จำเป็นเพื่อใช้ HTTP ในแอปพลิเคชัน
• คุณปรับโครงสร้างใหม่HeroServiceเพื่อโหลดฮีโร่จากเว็บ API
• คุณขยายHeroServiceการสนับสนุนpost(), put(), และdelete()วิธีการ
• คุณได้อัปเดตส่วนประกอบเพื่อให้สามารถเพิ่ม แก้ไข และลบฮีโร่ได้
• คุณกำหนดค่า API เว็บในหน่วยความจำ
• คุณได้เรียนรู้วิธีใช้สิ่งที่สังเกตได้